@page "/"
@using IntelliBot.WebApp.Models
@inject IntelliBot.WebApp.Services.ICoreService CoreService
@rendermode InteractiveServer

<PageTitle>IntelliBot</PageTitle>

<div class="assistant-container">
    <div class="assistant-header">
        <img src="bot-icon.svg" alt="Assistant Icon" class="assistant-icon" />
        <h2>IntelliBot Assistant</h2>
    </div>
    
    <div class="conversation-panel">
        @foreach (var message in _messages)
        {
            <div class="@GetMessageClass(message)">
                <div class="message-sender">
                    @(message.IsUser ? "You:" : "Assistant:")
                </div>
                <div class="message-content">
                    @if (message.IsLoading)
                    {
                        <div class="thinking-animation">
                            <span></span><span></span><span></span>
                        </div>
                    }
                    else
                    {
                        @message.Text
                    }
                </div>
                <div class="message-timestamp">
                    @DateTime.Now.ToString("HH:mm")
                </div>
            </div>
        }
    </div>

    <div class="input-section">
        <textarea @bind="_userInput" 
                  placeholder="Ask me anything..." 
                  @onkeydown="HandleKeyDown"></textarea>
        <button @onclick="ProcessInput" disabled="@_isProcessing">
            <i class="send-icon"></i> Send
        </button>
    </div>
    
    <div class="assistant-footer">
        <small>Powered by IntelliBot Cognitive Engine</small>
    </div>
</div>

@code {
    private string _userInput = string.Empty;
    private readonly List<Message> _messages = new();
    private bool _isProcessing;
    private string GetMessageClass(Message message)
    {
        return message.IsUser ? "user-message" : "assistant-message";
    }
    
    private async Task ProcessInput()
    {
        if (string.IsNullOrWhiteSpace(_userInput))
            return;
        
        _messages.Add(new Message { Text = _userInput, IsUser = true });
        _isProcessing = true; 
        
        string currentMessage = _userInput;
        _userInput = string.Empty; 
        
        Message aiResponsePlaceholder = new Message { Text = "", IsUser = false, IsLoading = true };
        _messages.Add(aiResponsePlaceholder);

        try
        {
            AssistantResponse? response = await CoreService.ProcessInputAsync(currentMessage);
            
            if (response != null)
            {
                aiResponsePlaceholder.Text = response.Reply;
            }
        }
        catch (HttpRequestException ex)
        {
            aiResponsePlaceholder.Text = $"Connection error ({ex.Message})";
        }
        finally
        {
            aiResponsePlaceholder.IsLoading = false; 
            _isProcessing = false; 
            StateHasChanged(); 
        }
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !_isProcessing)
        {
            await ProcessInput();
        }
    }

    private class Message
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public bool IsLoading { get; set; } 
    }
}